# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

from __future__ import absolute_import

import time
import re
import datetime
import wsme.types

from flask import g
from flask_login import current_user

from relengapi_common.api import apimethod
from relengapi_clobberer import api
from relengapi_clobberer.models import DB_DECLARATIVE_BASE, ClobbererTimes


__name__ = 'clobberer'


def _add_clobber(app, session, branch, builddir, slave=None):
    """
    A common method for adding clobber times to a session. The session passed
    in is returned; but is only committed if the commit option is True.
    """
    match = re.search('^' + api.BUILDBOT_BUILDDIR_REL_PREFIX + '.*', builddir)
    if match is None:
        try:
            who = current_user.authenticated_email
        except AttributeError:
            if current_user.anonymous:
                who = 'anonymous'
            else:
                # TokenUser doesn't show up as anonymous; but also has no
                # authenticated_email
                who = 'automation'

        clobberer_times = ClobbererTimes.as_unique(
            session,
            branch=branch,
            builddir=builddir,
            slave=slave,
        )
        clobberer_times.lastclobber = int(time.time())
        clobberer_times.who = who
        session.add(clobberer_times)
        return None
    app.log.debug('Rejecting clobber of builddir with release '
                  'prefix: {}'.format(builddir))
    return None


class Branch(wsme.types.Base):
    """Represents branches of buildbot
    """
    name = wsme.types.wsattr(unicode, mandatory=True)
    data = wsme.types.wsattr(
        {unicode: [unicode]}, mandatory=False, default=list())


def init_app(app):

    caches_to_skip = app.config.get('TASKCLUSTER_CACHES_TO_SKIP', [])

    @app.route('/')
    def root():
        # TODO: point to tools page for clobberer or documentation
        return 'Clobberer is running ...'

    @app.route('/buildbot', methods=['GET'])
    @apimethod([Branch])
    def get_buildout():
        """List of all buildbot branches.
        """
        session = g.db.session(DB_DECLARATIVE_BASE)
        # TODO: only cache this in production
        # branches = app.cache.cached()(api.buildbot_branches)(session)
        branches = api.buildbot_branches(session)
        return [
            Branch(
                name=branch['name'],
                data={
                    name: [
                        datetime.datetime.fromtimestamp(
                            builder.lastclobber).strftime("%Y-%m-%d %H:%M:%S")
                        for builder in builders
                        if builder.lastclobber
                    ]
                    for name, builders in branch['builders'].items()
                }
            )
            for branch in branches
        ]

    @app.route('/buildbot', methods=['POST'])
    @apimethod(unicode, body=[unicode, unicode])
    def post_buildout(body):
        """
        Request clobbers for particular branches and builddirs.
        """
        session = g.db.session(DB_DECLARATIVE_BASE)
        for clobber in body:
            _add_clobber(
                app,
                session,
                branch=clobber.branch,
                builddir=clobber.builddir,
                slave=clobber.slave
            )
        session.commit()
        return None

    @app.route('/taskcluster', methods=['GET'])
    @apimethod([Branch])
    def get_taskcluster():
        """List of all the gecko branches with their worker types
        """
        branches = app.cache.cached()(api.taskcluster_branches)()
        return [
            Branch(
                name=branchName,
                data={
                    workerName: filter(lambda x: x not in caches_to_skip, worker['caches'])  # noqa
                    for workerName, worker in branch['workerTypes'].items()
                }
            )
            for branchName, branch in branches.items()
        ]

    # TODO post_taskcluster

    return api
